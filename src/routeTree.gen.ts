/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as RegistrarSeRouteImport } from './routes/registrar-se'
import { Route as ObrigadoRouteImport } from './routes/obrigado'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminLayoutRouteImport } from './routes/admin/_layout'

const AdminRouteImport = createFileRoute('/admin')()

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const RegistrarSeRoute = RegistrarSeRouteImport.update({
  id: '/registrar-se',
  path: '/registrar-se',
  getParentRoute: () => rootRouteImport,
} as any)
const ObrigadoRoute = ObrigadoRouteImport.update({
  id: '/obrigado',
  path: '/obrigado',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLayoutRoute = AdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/obrigado': typeof ObrigadoRoute
  '/registrar-se': typeof RegistrarSeRoute
  '/signup': typeof SignupRoute
  '/admin': typeof AdminLayoutRoute
  '/admin/dashboard': typeof AdminDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/obrigado': typeof ObrigadoRoute
  '/registrar-se': typeof RegistrarSeRoute
  '/signup': typeof SignupRoute
  '/admin': typeof AdminLayoutRoute
  '/admin/dashboard': typeof AdminDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/obrigado': typeof ObrigadoRoute
  '/registrar-se': typeof RegistrarSeRoute
  '/signup': typeof SignupRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/_layout': typeof AdminLayoutRoute
  '/admin/dashboard': typeof AdminDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/obrigado'
    | '/registrar-se'
    | '/signup'
    | '/admin'
    | '/admin/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/obrigado'
    | '/registrar-se'
    | '/signup'
    | '/admin'
    | '/admin/dashboard'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/obrigado'
    | '/registrar-se'
    | '/signup'
    | '/admin'
    | '/admin/_layout'
    | '/admin/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  ObrigadoRoute: typeof ObrigadoRoute
  RegistrarSeRoute: typeof RegistrarSeRoute
  SignupRoute: typeof SignupRoute
  AdminRoute: typeof AdminRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/registrar-se': {
      id: '/registrar-se'
      path: '/registrar-se'
      fullPath: '/registrar-se'
      preLoaderRoute: typeof RegistrarSeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/obrigado': {
      id: '/obrigado'
      path: '/obrigado'
      fullPath: '/obrigado'
      preLoaderRoute: typeof ObrigadoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/_layout': {
      id: '/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLayoutRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminLayoutRoute: typeof AdminLayoutRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminLayoutRoute: AdminLayoutRoute,
  AdminDashboardRoute: AdminDashboardRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  ObrigadoRoute: ObrigadoRoute,
  RegistrarSeRoute: RegistrarSeRoute,
  SignupRoute: SignupRoute,
  AdminRoute: AdminRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
