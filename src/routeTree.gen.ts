/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppUsageRouteImport } from './routes/app/usage'
import { Route as AppIntegrationsRouteImport } from './routes/app/integrations'
import { Route as AppDocumentationRouteImport } from './routes/app/documentation'
import { Route as AppDashboardRouteImport } from './routes/app/dashboard'
import { Route as LandingWaitListRouteImport } from './routes/_landing/wait-list'
import { Route as LandingThankYouRouteImport } from './routes/_landing/thank-you'
import { Route as LandingSignUpRouteImport } from './routes/_landing/sign-up'
import { Route as LandingSignInRouteImport } from './routes/_landing/sign-in'

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppUsageRoute = AppUsageRouteImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => AppRoute,
} as any)
const AppIntegrationsRoute = AppIntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => AppRoute,
} as any)
const AppDocumentationRoute = AppDocumentationRouteImport.update({
  id: '/documentation',
  path: '/documentation',
  getParentRoute: () => AppRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute,
} as any)
const LandingWaitListRoute = LandingWaitListRouteImport.update({
  id: '/_landing/wait-list',
  path: '/wait-list',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingThankYouRoute = LandingThankYouRouteImport.update({
  id: '/_landing/thank-you',
  path: '/thank-you',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingSignUpRoute = LandingSignUpRouteImport.update({
  id: '/_landing/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingSignInRoute = LandingSignInRouteImport.update({
  id: '/_landing/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/sign-in': typeof LandingSignInRoute
  '/sign-up': typeof LandingSignUpRoute
  '/thank-you': typeof LandingThankYouRoute
  '/wait-list': typeof LandingWaitListRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/documentation': typeof AppDocumentationRoute
  '/app/integrations': typeof AppIntegrationsRoute
  '/app/usage': typeof AppUsageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/sign-in': typeof LandingSignInRoute
  '/sign-up': typeof LandingSignUpRoute
  '/thank-you': typeof LandingThankYouRoute
  '/wait-list': typeof LandingWaitListRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/documentation': typeof AppDocumentationRoute
  '/app/integrations': typeof AppIntegrationsRoute
  '/app/usage': typeof AppUsageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/_landing/sign-in': typeof LandingSignInRoute
  '/_landing/sign-up': typeof LandingSignUpRoute
  '/_landing/thank-you': typeof LandingThankYouRoute
  '/_landing/wait-list': typeof LandingWaitListRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/documentation': typeof AppDocumentationRoute
  '/app/integrations': typeof AppIntegrationsRoute
  '/app/usage': typeof AppUsageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/sign-in'
    | '/sign-up'
    | '/thank-you'
    | '/wait-list'
    | '/app/dashboard'
    | '/app/documentation'
    | '/app/integrations'
    | '/app/usage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/sign-in'
    | '/sign-up'
    | '/thank-you'
    | '/wait-list'
    | '/app/dashboard'
    | '/app/documentation'
    | '/app/integrations'
    | '/app/usage'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/_landing/sign-in'
    | '/_landing/sign-up'
    | '/_landing/thank-you'
    | '/_landing/wait-list'
    | '/app/dashboard'
    | '/app/documentation'
    | '/app/integrations'
    | '/app/usage'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LandingSignInRoute: typeof LandingSignInRoute
  LandingSignUpRoute: typeof LandingSignUpRoute
  LandingThankYouRoute: typeof LandingThankYouRoute
  LandingWaitListRoute: typeof LandingWaitListRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/usage': {
      id: '/app/usage'
      path: '/usage'
      fullPath: '/app/usage'
      preLoaderRoute: typeof AppUsageRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/integrations': {
      id: '/app/integrations'
      path: '/integrations'
      fullPath: '/app/integrations'
      preLoaderRoute: typeof AppIntegrationsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/documentation': {
      id: '/app/documentation'
      path: '/documentation'
      fullPath: '/app/documentation'
      preLoaderRoute: typeof AppDocumentationRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRoute
    }
    '/_landing/wait-list': {
      id: '/_landing/wait-list'
      path: '/wait-list'
      fullPath: '/wait-list'
      preLoaderRoute: typeof LandingWaitListRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/thank-you': {
      id: '/_landing/thank-you'
      path: '/thank-you'
      fullPath: '/thank-you'
      preLoaderRoute: typeof LandingThankYouRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/sign-up': {
      id: '/_landing/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof LandingSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/sign-in': {
      id: '/_landing/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof LandingSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppDocumentationRoute: typeof AppDocumentationRoute
  AppIntegrationsRoute: typeof AppIntegrationsRoute
  AppUsageRoute: typeof AppUsageRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppDocumentationRoute: AppDocumentationRoute,
  AppIntegrationsRoute: AppIntegrationsRoute,
  AppUsageRoute: AppUsageRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LandingSignInRoute: LandingSignInRoute,
  LandingSignUpRoute: LandingSignUpRoute,
  LandingThankYouRoute: LandingThankYouRoute,
  LandingWaitListRoute: LandingWaitListRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
